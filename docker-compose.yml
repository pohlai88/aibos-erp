version: '3.8'

services:
  # PostgreSQL Database with RLS enabled
  postgres:
    image: postgres:15-alpine
    container_name: aibos-postgres
    environment:
      POSTGRES_DB: aibos_erp
      POSTGRES_USER: aibos
      POSTGRES_PASSWORD: aibos_dev_password
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c log_statement=all
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U aibos -d aibos_erp']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aibos-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: aibos-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass aibos_redis_password
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aibos-network

  # ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: aibos-clickhouse
    environment:
      CLICKHOUSE_DB: aibos_analytics
      CLICKHOUSE_USER: aibos
      CLICKHOUSE_PASSWORD: aibos_clickhouse_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - '8123:8123'
      - '9000:9000'
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./scripts/clickhouse-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:8123/ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aibos-network

  # Kong API Gateway
  kong:
    image: kong:3.0-alpine
    container_name: aibos-kong
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - '8000:8000' # Proxy
      - '8001:8001' # Admin API
    volumes:
      - ./scripts/kong.yml:/kong/declarative/kong.yml
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ['CMD', 'kong', 'health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aibos-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: aibos-otel-collector
    command: ['--config=/etc/otel-collector-config.yaml']
    volumes:
      - ./scripts/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '4317:4317' # OTLP gRPC receiver
      - '4318:4318' # OTLP HTTP receiver
      - '8888:8888' # Prometheus metrics
      - '8889:8889' # Prometheus exporter metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - aibos-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: aibos-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - '16686:16686' # Jaeger UI
      - '14268:14268' # Jaeger collector HTTP
      - '14250:14250' # Jaeger collector gRPC
    volumes:
      - jaeger_data:/tmp
    networks:
      - aibos-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: aibos-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    volumes:
      - ./scripts/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - aibos-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: aibos-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: aibos_grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - '3001:3000' # Grafana UI (avoiding conflict with Next.js on 3000)
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./scripts/grafana-datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - aibos-network

  # MongoDB for document storage (optional)
  mongodb:
    image: mongo:7.0
    container_name: aibos-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: aibos
      MONGO_INITDB_ROOT_PASSWORD: aibos_mongo_password
      MONGO_INITDB_DATABASE: aibos_documents
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - aibos-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  clickhouse_data:
    driver: local
  jaeger_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  aibos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
