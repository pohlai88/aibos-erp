name: Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.11.1'
  PNPM_VERSION: '9.7.1'
  CI: true

jobs:
  # Security Scanning Job
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Secret Detection (TruffleHog)
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: SAST Scanning (Semgrep)
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/typescript
            p/javascript
            p/docker
            p/github-actions
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Dependency Vulnerability Scan
        run: pnpm audit --audit-level moderate

      - name: License Compliance Check
        run: |
          pnpm add -D license-checker
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense'

  # Performance Monitoring Job
  performance:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Bundle Size Analysis
        run: |
          pnpm add -D bundlesize
          npx bundlesize

      - name: Lighthouse CI (Core Web Vitals)
        run: |
          pnpm add -D @lhci/cli
          npx lhci autorun

      - name: Memory Leak Detection
        run: |
          pnpm add -D clinic
          npx clinic doctor -- node dist/apps/bff/main.js &
          sleep 10
          kill %1

  # Testing Framework Job
  testing:
    name: Testing Framework
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Unit Tests
        run: pnpm run test

      - name: Mutation Testing (Stryker)
        run: |
          pnpm add -D @stryker-mutator/core @stryker-mutator/jest-runner
          npx stryker run

      - name: Contract Testing (Pact)
        run: |
          pnpm add -D @pact-foundation/pact
          npx pact-verifier

      - name: Accessibility Testing (axe-core)
        run: |
          pnpm add -D @axe-core/cli
          npx @axe-core/cli http://localhost:3000

      - name: Visual Regression Testing (Chromatic)
        if: github.event_name == 'pull_request'
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  # Data Governance Job
  data-governance:
    name: Data Governance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: PII Detection
        run: |
          pnpm add -D pii-detector
          npx pii-detector scan --path ./src

      - name: Data Retention Policy Check
        run: |
          pnpm add -D data-retention-checker
          npx data-retention-checker --config .data-retention.json

      - name: GDPR Compliance Check
        run: |
          pnpm add -D gdpr-compliance-checker
          npx gdpr-compliance-checker --audit

      - name: Audit Trail Validation
        run: |
          pnpm add -D audit-trail-validator
          npx audit-trail-validator --verify

  # Quality Gates Job
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [security, performance, testing, data-governance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript Compilation
        run: pnpm run typecheck

      - name: ESLint Lineage Enforcement
        run: pnpm run lint

      - name: Architectural Contracts (Dependency-Cruiser)
        run: pnpm run lint:arch

      - name: Package Validation
        run: pnpm run syncpack:check

      - name: Code Coverage
        run: pnpm run test:coverage

      - name: Quality Gate Summary
        run: |
          echo "## Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security scanning passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Performance monitoring passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Testing framework passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Data governance passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ All quality gates passed!" >> $GITHUB_STEP_SUMMARY

  # Database Quality Job
  database-quality:
    name: Database Quality
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aibos_erp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build BFF
        run: pnpm --filter @aibos/bff build

      - name: Run Database Migrations
        run: pnpm --filter @aibos/bff run db:migrate
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_DATABASE: aibos_erp_test

      - name: RLS Tests (Row Level Security)
        run: |
          pnpm add -D pg
          node -e "
            const { Client } = require('pg');
            const client = new Client({
              host: 'localhost',
              port: 5432,
              user: 'postgres',
              password: 'postgres',
              database: 'aibos_erp_test'
            });
            
            async function testRLS() {
              await client.connect();
              
              // Test tenant isolation
              await client.query('SET app.current_tenant_id = \\'tenant1\\'');
              const result1 = await client.query('SELECT * FROM users');
              
              await client.query('SET app.current_tenant_id = \\'tenant2\\'');
              const result2 = await client.query('SELECT * FROM users');
              
              console.log('RLS Test Results:');
              console.log('Tenant 1 users:', result1.rows.length);
              console.log('Tenant 2 users:', result2.rows.length);
              
              await client.end();
            }
            
            testRLS().catch(console.error);
          "

      - name: Database Performance Tests
        run: |
          pnpm add -D pg-stat-statements
          npx pg-stat-statements --analyze

  # Final Quality Gate
  final-gate:
    name: Final Quality Gate
    runs-on: ubuntu-latest
    needs: [security, performance, testing, data-governance, quality, database-quality]
    if: always()
    steps:
      - name: Quality Gate Results
        run: |
          echo "## 🎯 Final Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scanning | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Monitoring | ${{ needs.performance.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testing Framework | ${{ needs.testing.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Data Governance | ${{ needs.data-governance.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Database Quality | ${{ needs.database-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.security.result }}" == "success" && "${{ needs.performance.result }}" == "success" && "${{ needs.testing.result }}" == "success" && "${{ needs.data-governance.result }}" == "success" && "${{ needs.quality.result }}" == "success" && "${{ needs.database-quality.result }}" == "success" ]]; then
            echo "🎉 **ALL QUALITY GATES PASSED!** Ready for merge." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ **QUALITY GATES FAILED!** Please fix issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
